predict_data,
start_date_predictions,
end_date_predictions,
max_lag_prediction
)
}
# 2) OIL
# FULL Sample GARCH model
# define inputs for function
models = model_list_choices[[3]]
analysis_variable = analysis_variable_choices[2]
predict_data[, colnames(predict_data) == "analysis_variable"] = predict_data[, colnames(predict_data) == analysis_variable]
# predict variance
model_in_sample_pred[[3]] = models
in_sample_pred_result[[3]] = in_sample_forecast(
models = models ,
predict_data,
start_date_predictions,
end_date_predictions,
max_lag_prediction
)
# match dates in in_sample_pred_result
# remove missing forecasts
in_sample_pred_result[[1]] = in_sample_pred_result[[1]][is.na(in_sample_pred_result[[1]]$variance_predict)==F,]
in_sample_pred_result[[2]] = in_sample_pred_result[[2]][is.na(in_sample_pred_result[[2]]$variance_predict)==F,]
in_sample_pred_result[[3]] = in_sample_pred_result[[3]][is.na(in_sample_pred_result[[3]]$variance_predict)==F,]
# !remove one missing obs in tree from other dataframes
ind_same_date = in_sample_pred_result[[1]]$date %in% in_sample_pred_result[[2]]$date
in_sample_pred_result[[2]] = in_sample_pred_result[[2]][-ind_same_date,]
ind_same_date = in_sample_pred_result[[1]]$date %in% in_sample_pred_result[[3]]$date
in_sample_pred_result[[3]] = in_sample_pred_result[[3]][-ind_same_date,]
## EDIT FOR DCC input
# add seperate predictions for subsapmle 1 and 2 of tree and remove missings
rub_tree_subsample1 = left_join(all_selected_model_tree$rub_subsample1$returns_with_date, in_sample_pred_result[[1]], by ="date")
rub_tree_subsample1 = rub_tree_subsample1[is.na(rub_tree_subsample1$variance_predict)==F,]
rub_tree_subsample2 = left_join(all_selected_model_tree$rub_subsample2$returns_with_date, in_sample_pred_result[[1]], by ="date")
rub_tree_subsample2 = rub_tree_subsample2[is.na(rub_tree_subsample2$variance_predict)==F,]
in_sample_pred_result[[4]] = rub_tree_subsample1
in_sample_pred_result[[5]] = rub_tree_subsample2
# match dates in in_sample_pred_result
# remove missing forecasts
in_sample_pred_result[[1]] = in_sample_pred_result[[1]][is.na(in_sample_pred_result[[1]]$variance_predict)==F,]
in_sample_pred_result[[2]] = in_sample_pred_result[[2]][is.na(in_sample_pred_result[[2]]$variance_predict)==F,]
in_sample_pred_result[[3]] = in_sample_pred_result[[3]][is.na(in_sample_pred_result[[3]]$variance_predict)==F,]
# !remove one missing obs in tree from other dataframes
ind_same_date = in_sample_pred_result[[1]]$date %in% in_sample_pred_result[[2]]$date
in_sample_pred_result[[2]] = in_sample_pred_result[[2]][-ind_same_date,]
ind_same_date = in_sample_pred_result[[1]]$date %in% in_sample_pred_result[[3]]$date
in_sample_pred_result[[3]] = in_sample_pred_result[[3]][-ind_same_date,]
## univ model compare: add tree forecasts
in_sample_pred_result_model_compare[[4]] = in_sample_pred_result[[1]]
# univ model compare: remove missing forecasts
in_sample_pred_result_model_compare[[1]] = in_sample_pred_result_model_compare[[1]][is.na(in_sample_pred_result_model_compare[[1]]$variance_predict)==F,]
in_sample_pred_result_model_compare[[2]] = in_sample_pred_result_model_compare[[2]][is.na(in_sample_pred_result_model_compare[[2]]$variance_predict)==F,]
in_sample_pred_result_model_compare[[3]] = in_sample_pred_result_model_compare[[3]][is.na(in_sample_pred_result_model_compare[[3]]$variance_predict)==F,]
# match dates of tree
ind_same_date = in_sample_pred_result_model_compare[[4]]$date %in% in_sample_pred_result_model_compare[[1]]$date
in_sample_pred_result_model_compare[[1]] = in_sample_pred_result_model_compare[[1]][-ind_same_date,]
ind_same_date = in_sample_pred_result_model_compare[[4]]$date %in% in_sample_pred_result_model_compare[[2]]$date
in_sample_pred_result_model_compare[[2]] = in_sample_pred_result_model_compare[[2]][-ind_same_date,]
ind_same_date = in_sample_pred_result_model_compare[[4]]$date %in% in_sample_pred_result_model_compare[[3]]$date
in_sample_pred_result_model_compare[[3]] = in_sample_pred_result_model_compare[[3]][-ind_same_date,]
ind_same_date = in_sample_pred_result_model_compare[[4]]$date %in% in_sample_pred_result_model_compare[[4]]$date
in_sample_pred_result_model_compare[[4]] = in_sample_pred_result_model_compare[[4]][-ind_same_date,]
# set names for series and save
#for dcc
names(in_sample_pred_result) = c("rub_tree", "rub", "oil","rub_tree_subsample1","rub_tree_subsample2")
names(model_in_sample_pred) = c("rub_tree", "rub", "oil")
saveRDS(in_sample_pred_result,
file = paste0(outpathModels, "in_sample_pred_result.rds"))
# for univariate
names(in_sample_pred_result_model_compare) = c("rub_normal_11","rub_t_11" , "gjr_rub_t_11","rub_tree")
names(model_in_sample_pred_model_compare) = c("rub_normal_11","rub_t_11" , "gjr_rub_t_11")
saveRDS(in_sample_pred_result,
file = paste0(outpathModels, "in_sample_pred_result_model_compare.rds"))
# list with models and predictions
overall_model_list = list(model_in_sample_pred, in_sample_pred_result)
names(overall_model_list) = c("models","predictions")
saveRDS(overall_model_list,
file = paste0(outpathModels, "model_and_prediction.rds"))
summary(
in_sample_pred_result$rub_tree$variance_predict - in_sample_pred_result$rub$variance_predict
)
# brief check of results
for (i in 1:length(in_sample_pred_result)) {
print(names(in_sample_pred_result)[i])
print(summary(in_sample_pred_result[[i]]$variance_predict))
print(summary(in_sample_pred_result[[i]]$residuals_garch))
}
source("scripts/functions.R") # functions
in_sample_pred_result_model_compare$rub_normal_11$variance_predict
title = "RUBUSD Daily Returns Volatility"
xlab = "Time"
ylab= ""
y1 = sqrt(in_sample_pred_result_model_compare[[1]]$variance_proxy)
x = in_sample_pred_result_model_compare[[1]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
title = "RUBUSD Abs Daily Returns"
xlab = "Time"
ylab= ""
y1 = in_sample_pred_result_model_compare[[1]]$mae_proxy
x = in_sample_pred_result_model_compare[[1]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
title_plot = paste("RUBUSD Volatility -", c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t"))
for (i in 1:length(in_sample_pred_result_model_compare))  {
title = title_plot[i]
xlab = "Time"
ylab= ""
y1 = sqrt(in_sample_pred_result_model_compare[[i]]$variance_predict)
x = in_sample_pred_result_model_compare[[i]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
}
in_sample_pred_result_model_compare$rub_normal_11$
title_plot = paste("RUBUSD Volatility -", c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t"))
for (i in 1:length(in_sample_pred_result_model_compare))  {
title = title_plot[i]
xlab = "Time"
ylab= ""
y1 = sqrt(in_sample_pred_result_model_compare[[i]]$variance_predict)
x = in_sample_pred_result_model_compare[[i]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
}
in_sample_pred_result_model_compare$rub_normal_11$date
in_sample_pred_result_model_compare
title_plot = paste("RUBUSD Volatility -", c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t"))
for (i in 1:length(in_sample_pred_result_model_compare))  {
title = title_plot[i]
xlab = "Time"
ylab= ""
y1 = sqrt(in_sample_pred_result_model_compare[[i]]$variance_predict)
x = in_sample_pred_result_model_compare[[i]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
}
# add MAE proxy
for (i in 1:length(in_sample_pred_result_model_compare))  {
in_sample_pred_result_model_compare[[i]]$mae_proxy = abs(in_sample_pred_result_model_compare[[i]]$rub_errors)
in_sample_pred_result_model_compare[[i]]$vol_proxy_standardized = in_sample_pred_result_model_compare[[i]]$variance_proxy /in_sample_pred_result_model_compare[[i]]$variance_predict
in_sample_pred_result_model_compare[[i]]$mae_proxy_standardized = in_sample_pred_result_model_compare[[i]]$mae_proxy /in_sample_pred_result_model_compare[[i]]$variance_predict
}
data_predictions = in_sample_pred_result_model_compare
data_predictions_selected = data_predictions[[1]]
# classic regression
classic_mz = lm(data_predictions_selected$variance_proxy ~ data_predictions_selected$variance_predict )
summary(model)
linearHypothesis(classic_mz, diag(2), c(0,1))
in_sample_pred_result_model_compare$
# Minzer-Zarnowitz-regressions for RUB ----
data_predictions = in_sample_pred_result_model_compare
data_predictions$rub_normal_11
data_predictions = in_sample_pred_result_model_compare
data_predictions_selected = data_predictions[[1]]
# classic regression
classic_mz = lm(data_predictions_selected$variance_proxy ~ data_predictions_selected$variance_predict )
summary(classic_mz)
linearHypothesis(classic_mz, diag(2), c(0,1))
linearHypothesis(classic_mz, 2, c(1))
linearHypothesis(classic_mz, 1, c(0))
data_predictions$rub_normal_11diag(2)
diag(2)
# classic regression
classic_mz = lm(data_predictions_selected$variance_proxy ~ data_predictions_selected$variance_predict, white.adjust = TRUE )
classic_mz
linearHypothesis(classic_mz, c("(Intercept) = 0"))
linearHypothesis(classic_mz, c("(Intercept) = 0") , c("variance_predict = 1"))
summary(classic_mz)
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
summary(classic_mz)
linearHypothesis(classic_mz, c("(Intercept) = 0"))
linearHypothesis(classic_mz, c("variance_predict = 1"))
linearHypothesis(classic_mz, c("(Intercept) = 0"))
linearHypothesis(classic_mz, c("variance_predict = 1"))
linearHypothesis(classic_mz, c("(Intercept) = 0") , c("variance_predict = 1"))
linearHypothesis(classic_mz, c("(Intercept) = 0" , "variance_predict = 1"))
linearHypothesis(classic_mz, diag(2), c(0,1), white.adjust = TRUE)
summary(classic_mz)
classic_mz$coefficients
summary(classic_mz)
summary(classic_mz)$Coefficients
summary(classic_mz)$coefficients
summary(classic_mz)
a = summary(classic_mz)
a$r.squared
alternative_mz = lm(vol_proxy_standardized ~ vol_proxy_standardized, data = data_predictions_selected)
# add MAE proxy
for (i in 1:length(in_sample_pred_result_model_compare))  {
in_sample_pred_result_model_compare[[i]]$mae_proxy = abs(in_sample_pred_result_model_compare[[i]]$rub_errors)
in_sample_pred_result_model_compare[[i]]$vol_proxy_standardized = in_sample_pred_result_model_compare[[i]]$variance_proxy /in_sample_pred_result_model_compare[[i]]$variance_predict
in_sample_pred_result_model_compare[[i]]$mae_proxy_standardized = in_sample_pred_result_model_compare[[i]]$mae_proxy /in_sample_pred_result_model_compare[[i]]$variance_predict
}
# plot all returns
title = "RUBUSD Daily Returns Volatility"
xlab = "Time"
ylab= ""
y1 = sqrt(in_sample_pred_result_model_compare[[1]]$variance_proxy)
x = in_sample_pred_result_model_compare[[1]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
title = "RUBUSD Abs Daily Returns"
xlab = "Time"
ylab= ""
y1 = in_sample_pred_result_model_compare[[1]]$mae_proxy
x = in_sample_pred_result_model_compare[[1]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
title_plot = paste("RUBUSD Volatility -", c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t"))
for (i in 1:length(in_sample_pred_result_model_compare))  {
title = title_plot[i]
xlab = "Time"
ylab= ""
y1 = sqrt(in_sample_pred_result_model_compare[[i]]$variance_predict)
x = in_sample_pred_result_model_compare[[i]]$date
names_y = c("RUB/USD")
line_plot_multiple(title, outpath = outpathModels, x,xlab, ylab, names_y, y_percent=T, y_discrete=F, legend=F, y1)
}
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
coefs = summary(classic_mz)$coefficients
coefs
1.463796e-01
data_predictions_selected = data_predictions[[2]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
coefs = summary(classic_mz)$coefficients
coefs
data_predictions_selected = data_predictions[[3]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
coefs = summary(classic_mz)$coefficients
coefs
data_predictions_selected = data_predictions[[4]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
coefs = summary(classic_mz)$coefficients
coefs
variance_predict
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
classic_mz = lm(mae_proxy ~ variance_predict, data = data_predictions_selected)
coefs = summary(classic_mz)$coefficients
coefs
mae_proxy
data_predictions_selected$mae_proxy
summary(data_predictions_selected)
lin_hyp = linearHypothesis(classic_mz, c("(Intercept) = 0"))
lin_hyp$`Pr(>F)`
lin_hyp$F
lin_hyp = linearHypothesis(classic_mz, c("(Intercept) = 0"))$`Pr(>F)`[2]
lin_hyp
# Minzer-Zarnowitz-regressions for RUB ----
data_predictions = in_sample_pred_result_model_compare[-5]
summary(data_predictions)
data_predictions = in_sample_pred_result_model_compare[-5]
test_results = as.data.frame(matrix(nrow= 5, ncol = 3,))
colnames(test_results) = c("model", "alpha", "beta")
test_results = as.data.frame(matrix(nrow= 5, ncol = 3,))
colnames(test_results) = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
test_results = as.data.frame(matrix(nrow= 5, ncol = 3,))
colnames = c("model","alpha","beta")
colnames = c("model","alpha","beta")
test_results = as.data.frame(matrix(nrow= 5, ncol = 3,))
colnames(test_results) = c("model","alpha","beta")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
test_results = as.data.frame(matrix(nrow= 4, ncol = 3,))
colnames(test_results) = c("model","alpha","beta")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
View(test_results)
coefs
summary(classic_mz)
r_sq = summary(classic_mz)$r
r_sq
r_sq = summary(classic_mz)
r_sq$r.squared
test_results = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results) = c("model","alpha","beta","R^2 MZ")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
test_results_pval = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results) = c("model","alpha","beta", "joint_test")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
for (i in 1:length(data_predictions)) {
data_predictions_selected = data_predictions[[4]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
test_results[i,2:3] = summary(classic_mz)$coefficients[1:2,1]
test_results[i,4] = summary(classic_mz)$r.squared
test_results_pval[i,2] = linearHypothesis(classic_mz, c("(Intercept) = 0"))$`Pr(>F)`[2]
test_results_pval[i,3] = linearHypothesis(classic_mz, c("variance_predict = 1"))$`Pr(>F)`[2]
test_results_pval[i,4] = linearHypothesis(classic_mz, c("(Intercept) = 0" , "variance_predict = 1"))
}
warnings()
View(test_results)
length(data_predictions)
for (i in 1:length(data_predictions)) {
data_predictions_selected = data_predictions[[i]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
test_results[i,2:3] = summary(classic_mz)$coefficients[1:2,1]
test_results[i,4] = summary(classic_mz)$r.squared
test_results_pval[i,2] = linearHypothesis(classic_mz, c("(Intercept) = 0"))$`Pr(>F)`[2]
test_results_pval[i,3] = linearHypothesis(classic_mz, c("variance_predict = 1"))$`Pr(>F)`[2]
test_results_pval[i,4] = linearHypothesis(classic_mz, c("(Intercept) = 0" , "variance_predict = 1"))
}
View(test_results)
View(test_results)
test_results = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results) = c("model","alpha","beta","R^2 MZ")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
test_results_pval = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results_pval) = c("model","alpha","beta", "joint_test")
test_results_pval$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
for (i in 1:length(data_predictions)) {
data_predictions_selected = data_predictions[[i]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
test_results[i,2:3] = summary(classic_mz)$coefficients[1:2,1]
test_results[i,4] = summary(classic_mz)$r.squared
test_results_pval[i,2] = linearHypothesis(classic_mz, c("(Intercept) = 0"))$`Pr(>F)`[2]
test_results_pval[i,3] = linearHypothesis(classic_mz, c("variance_predict = 1"))$`Pr(>F)`[2]
test_results_pval[i,4] = linearHypothesis(classic_mz, c("(Intercept) = 0" , "variance_predict = 1"))
}
View(test_results_pval)
test_results = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results) = c("model","alpha","beta","R^2 MZ")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
test_results_pval = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results_pval) = c("model","alpha","beta", "joint_test")
test_results_pval$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
for (i in 1:length(data_predictions)) {
data_predictions_selected = data_predictions[[i]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
test_results[i,2:3] = summary(classic_mz)$coefficients[1:2,1]
test_results[i,4] = summary(classic_mz)$r.squared
test_results_pval[i,2] = linearHypothesis(classic_mz, c("(Intercept) = 0"))$`Pr(>F)`[2]
test_results_pval[i,3] = linearHypothesis(classic_mz, c("variance_predict = 1"))$`Pr(>F)`[2]
test_results_pval[i,4] = linearHypothesis(classic_mz, c("(Intercept) = 0" , "variance_predict = 1"))$`Pr(>F)`[2]
}
View(test_results_pval)
View(test_results)
coeftest(classic_mz, vcov = vcovHC(lmfit))
library(sandwich)
coeftest(classic_mz, vcov = vcovHC(m, type="HC1"))
install.packages("sandwich")
install.packages("sandwich")
library(sandwich)
coeftest(classic_mz, vcov = vcovHC(m, type="HC1"))
?coeftest
coeftest(classic_mz, vcov = vcovHC(m, type="HC1"))
install.packages("library(lmtest)")
install.packages("lmtest")
library(lmtest)
coeftest(classic_mz, vcov = vcovHC(m, type="HC1"))
coeftest(classic_mz, vcov = vcovHC(classic_mz, type="HC1"))
test_results[i,2:3] = coeftest(classic_mz, vcov = vcovHC(classic_mz, type="HC1"))[1:2,1]
test_results = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results) = c("model","alpha","beta","R^2 MZ")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
test_results_pval = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results_pval) = c("model","alpha","beta", "joint_test")
test_results_pval$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
for (i in 1:length(data_predictions)) {
data_predictions_selected = data_predictions[[i]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
test_results[i,2:3] = coeftest(classic_mz, vcov = vcovHC(classic_mz, type="HC1"))[1:2,1]
test_results[i,4] = summary(classic_mz)$r.squared
test_results_pval[i,2] = linearHypothesis(classic_mz, c("(Intercept) = 0"))$`Pr(>F)`[2]
test_results_pval[i,3] = linearHypothesis(classic_mz, c("variance_predict = 1"))$`Pr(>F)`[2]
test_results_pval[i,4] = linearHypothesis(classic_mz, c("(Intercept) = 0" , "variance_predict = 1"))$`Pr(>F)`[2]
}
test_results = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results) = c("model","alpha","beta","R^2 MZ")
test_results$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
test_results_pval = as.data.frame(matrix(nrow= 4, ncol = 4,))
colnames(test_results_pval) = c("model","alpha","beta", "joint_test")
test_results_pval$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
for (i in 1:length(data_predictions)) {
data_predictions_selected = data_predictions[[i]]
# classic regression
classic_mz = lm(variance_proxy ~ variance_predict, data = data_predictions_selected)
test_results[i,2:3] = coeftest(classic_mz, vcov = vcovHC(classic_mz, type="HC1"))[1:2,1]
test_results[i,4] = summary(classic_mz)$r.squared
test_results_pval[i,2] = car::linearHypothesis(classic_mz, c("(Intercept) = 0"))$`Pr(>F)`[2]
test_results_pval[i,3] = car::linearHypothesis(classic_mz, c("variance_predict = 1"))$`Pr(>F)`[2]
test_results_pval[i,4] = car::linearHypothesis(classic_mz, c("(Intercept) = 0" , "variance_predict = 1"))$`Pr(>F)`[2]
}
View(test_results)
xtable(test_results, caption = "MZ - Regression with squared return proxy")
xtable(test_results, caption = "PVALUES for MZ - Regression with squared return proxy")
#### Pre
# librarys
library(readxl)
library(readr)
library(data.table)
library(tidyverse)
library(stats)
library(ggfortify)
library(zoo)
library(xtable)
library(lubridate)
library(forecast)
library(tseries)
library(xts)
library(quantmod)
library(fGarch)
library(rugarch)
library(rmgarch)
library(psych)
library(MASS)
library(car)
library(sandwich)
library(lmtest)
filter <- dplyr::filter
select <- dplyr::select
setwd("~/GitHub/Volatile-Gamma") # setwd
source("scripts/functions.R") # functions
source("scripts/garchFunction.R") # functions
outpathDescriptive = "output/univariateDescriptives/"
outpathModels =  "output/univariateModels/"
xtable(test_results, caption = "MZ - Regression with squared return proxy")
xtable(test_results, caption = "PVALUES for MZ - Regression with squared return proxy")
all_selected_model  = readRDS("output/univariateModels/univariate_garchs_full_sample.rds")
all_selected_model_tree  = readRDS("output/univariateModels/univariate_garchs_tree_rub.rds")
all_selected_model_custom = readRDS("output/univariateModels/univariate_garchs_custom_rub.rds")
all_selected_model_tree$rub_subsample1$model_evaluation
all_selected_model_tree$rub_subsample2$model_evaluation
lik_tree = all_selected_model_tree$rub_subsample1$model_evaluation$log_lik + all_selected_model_tree$rub_subsample2$model_evaluation$log_lik
lik_tree
all_selected_model_tree$rub_subsample1$model_evaluation
all_selected_model_tree$rub_subsample2$model_evaluation
all_selected_model_tree$rub_subsample2$model_evaluation
lik_tree = all_selected_model_tree$rub_subsample1$model_evaluation$log_lik + all_selected_model_tree$rub_subsample2$model_evaluation$log_lik
aic_tree = all_selected_model_tree$rub_subsample1$model_evaluation$aic_model + all_selected_model_tree$rub_subsample2$model_evaluation$aic_model
lik_tree = all_selected_model_tree$rub_subsample1$model_evaluation$log_lik + all_selected_model_tree$rub_subsample2$model_evaluation$log_lik
aic_tree = all_selected_model_tree$rub_subsample1$model_evaluation$aic_model + all_selected_model_tree$rub_subsample2$model_evaluation$aic_model
likelihood_models = as.data.frame(matrix(nrow=3, ncol=5))
colnames(likelihood_models) = c("","Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
likelihood_models[,1] = c("logLik","AIC")
lik_tree = all_selected_model_tree$rub_subsample1$model_evaluation$log_lik + all_selected_model_tree$rub_subsample2$model_evaluation$log_lik
aic_tree = all_selected_model_tree$rub_subsample1$model_evaluation$aic_model + all_selected_model_tree$rub_subsample2$model_evaluation$aic_model
likelihood_models = as.data.frame(matrix(nrow=2, ncol=5))
colnames(likelihood_models) = c("","Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Tree-Garch(1,1) t")
likelihood_models[,1] = c("logLik","AIC")
View(likelihood_models)
likelihood_models$`Garch(1,1) normal` = c(all_selected_model_custom$rub_normal_11$model_evaluation$log_lik, all_selected_model_custom$rub_normal_11$model_evaluation$aic_model)
likelihood_models$`Garch(1,1) t` = c(all_selected_model_custom$rub_t_11$model_evaluation$log_lik, all_selected_model_custom$rub_t_11$model_evaluation$aic_model)
likelihood_models$`GJR-Garch(1,1) t` =  c(all_selected_model_custom$rub_t_gjr_11$model_evaluation$log_lik, all_selected_model_custom$rub_t_gjr_11$model_evaluation$aic_model)
likelihood_models$`Tree-Garch(1,1) t`= c(lik_tree,aic_tree)
View(likelihood_models)
xtable(likelihood_models, caption = "Likelihood comparision")
all_selected_model_tree$rub_subsample1$garch_coefs
all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_tree$rub_subsample2$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_custom$rub_normal_11$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_custom$rub_t_11$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_custom$rub_t_gjr_11$garch_coefs[c("alpha1","beta1","shape")]
c(all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")],"/")
all_selected_model_tree$rub_subsample2$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_custom$rub_normal_11$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_custom$rub_t_11$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_custom$rub_t_gjr_11$garch_coefs[c("alpha1","beta1","shape")]
all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")]
c(all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")],"/")
a = all_selected_model_tree$rub_subsample2$garch_coefs[c("alpha1","beta1","shape")]
a
coef_table[1,1:3] = c(all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")],"/")
oef_table = as.data.frame(matrix(nrow=3, ncol=5))
coef_table[1,1:3] = c(all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")],"/")
coef_table = as.data.frame(matrix(nrow=3, ncol=5))
coef_table[1,1:3] = c(all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")],"/")
coef_table
coef_table = as.data.frame(matrix(nrow=5, ncol=5))
colnames(coef_table) = c("","alpha","beta","df_t")
coef_table[1,2:4] = c(all_selected_model_custom$rub_normal_11$garch_coefs[c("alpha1","beta1")],"/")
coef_table[2,2:4] = all_selected_model_custom$rub_t_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[3,2:4] = all_selected_model_custom$rub_t_gjr_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[4,2:4] = all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")]
coef_table[5,2:4] = all_selected_model_tree$rub_subsample2$garch_coefs[c("alpha1","beta1","shape")]
colnames(coef_table) = c("model","alpha","beta","df_t")
coef_table = as.data.frame(matrix(nrow=5, ncol=5))
colnames(coef_table) = c("model","alpha","beta","df_t")
coef_table$model = 0
coef_table = as.data.frame(matrix(nrow=5, ncol=5))
colnames(coef_table) = c("model","alpha","beta","df_t")
coef_table$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Subsample 1 -Tree-Garch", "Subsample 2 -Tree-Garch")
coef_table[1,2:4] = c(all_selected_model_custom$rub_normal_11$garch_coefs[c("alpha1","beta1")],"/")
coef_table[2,2:4] = all_selected_model_custom$rub_t_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[3,2:4] = all_selected_model_custom$rub_t_gjr_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[4,2:4] = all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")]
coef_table[5,2:4] = all_selected_model_tree$rub_subsample2$garch_coefs[c("alpha1","beta1","shape")]
View(coef_table)
coef_table = as.data.frame(matrix(nrow=5, ncol=4))
colnames(coef_table) = c("model","alpha","beta","df_t")
coef_table$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Subsample 1 -Tree-Garch", "Subsample 2 -Tree-Garch")
coef_table[1,2:4] = c(all_selected_model_custom$rub_normal_11$garch_coefs[c("alpha1","beta1")],"/")
coef_table[2,2:4] = all_selected_model_custom$rub_t_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[3,2:4] = all_selected_model_custom$rub_t_gjr_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[4,2:4] = all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")]
coef_table[5,2:4] = all_selected_model_tree$rub_subsample2$garch_coefs[c("alpha1","beta1","shape")]
coef_table = as.data.frame(matrix(nrow=5, ncol=4))
colnames(coef_table) = c("model","alpha","beta","df_t")
coef_table$model = c("Garch(1,1) normal", "Garch(1,1) t", "GJR-Garch(1,1) t", "Subsample 1 -Tree-Garch", "Subsample 2 -Tree-Garch")
coef_table[1,2:4] = c(all_selected_model_custom$rub_normal_11$garch_coefs[c("alpha1","beta1")],"/")
coef_table[2,2:4] = all_selected_model_custom$rub_t_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[3,2:4] = all_selected_model_custom$rub_t_gjr_11$garch_coefs[c("alpha1","beta1","shape")]
coef_table[4,2:4] = all_selected_model_tree$rub_subsample1$garch_coefs[c("alpha1","beta1")]
coef_table[5,2:4] = all_selected_model_tree$rub_subsample2$garch_coefs[c("alpha1","beta1","shape")]
xtable(coef_table, caption = "Coefficient comparision univariate GARCH-models for RUBUSD")
